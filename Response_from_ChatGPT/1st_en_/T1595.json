{
  "id":"chatcmpl-8R1u9RfQ5AhLMQKLNuh80ek6QrWrn",
  "object":"chat.completion",
  "created":1701452869,
  "model":"gpt-3.5-turbo-0613",
  "choices":[
    {
      "index":0,
      "message":{
        "role":"assistant",
        "content":"[Feasible]\n\nT1595-Active Scanning\n\nMethod 1: Using the socket library to perform an active scan\n\n```python\nimport socket\n\ndef active_scan(target_ip, target_port):\n    try:\n        # Create a socket object\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        \n        # Set a timeout for the socket connection\n        s.settimeout(3)\n        \n        # Attempt to connect to the target IP and port\n        result = s.connect_ex((target_ip, target_port))\n        \n        if result == 0:\n            print(f\"Port {target_port} is open on {target_ip}\")\n        else:\n            print(f\"Port {target_port} is closed on {target_ip}\")\n        \n        s.close()\n    except socket.error as e:\n        print(f\"Socket error: {str(e)}\")\n\n# Usage example\nactive_scan(\"192.168.1.1\", 80)\n```\n\nMethod 2: Using the scapy library for more advanced active scanning\n\n```python\nfrom scapy.all import *\n\ndef active_scan(target_ip, target_port):\n    try:\n        # Craft a TCP SYN packet\n        packet = IP(dst=target_ip)/TCP(dport=target_port, flags=\"S\")\n        \n        # Send the packet and wait for a response\n        response = sr1(packet, timeout=3)\n        \n        if response and response.haslayer(TCP) and response.getlayer(TCP).flags == 0x12:\n            print(f\"Port {target_port} is open on {target_ip}\")\n        else:\n            print(f\"Port {target_port} is closed on {target_ip}\")\n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n\n# Usage example\nactive_scan(\"192.168.1.1\", 80)\n```\n\nMethod 3: Using the nmap library for comprehensive active scanning\n\n```python\nimport nmap\n\ndef active_scan(target_ip):\n    try:\n        # Create a new PortScanner object\n        scanner = nmap.PortScanner()\n        \n        # Scan the target IP for open ports\n        result = scanner.scan(target_ip, arguments=\"-p1-1000\")\n        \n        # Print the results\n        for port in scanner[target_ip]['tcp']:\n            state = scanner[target_ip]['tcp'][port]['state']\n            print(f\"Port {port} is {state} on {target_ip}\")\n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n\n# Usage example\nactive_scan(\"192.168.1.1\")\n```\n\nNote: For Methods 2 and 3, the `scapy` and `python-nmap` packages need to be installed respectively. You can install them using `pip install scapy` and `pip install python-nmap`."
      },
      "finish_reason":"stop"
    }
  ],
  "usage":{
    "prompt_tokens":559,
    "completion_tokens":580,
    "total_tokens":1139
  },
  "system_fingerprint":null
}