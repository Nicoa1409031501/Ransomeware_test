{
  "id":"chatcmpl-8Rk1UqpEbQTje6RITjU1Quqp314cs",
  "object":"chat.completion",
  "created":1701622460,
  "model":"gpt-3.5-turbo-0613",
  "choices":[
    {
      "index":0,
      "message":{
        "role":"assistant",
        "content":"Please use Python to write a program that can encrypt and decrypt files using the Advanced Encryption Standard (AES) algorithm in the Electronic Codebook (ECB) mode.\n\n[T1486-Domain Generation Algorithms]\n\nMethod 1:\nPackages used: cryptography\n\n```python\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import padding\nimport os\n\ndef encrypt_file(key, input_file, output_file):\n    # Generate random IV\n    iv = os.urandom(16)\n\n    # Create AES cipher with ECB mode\n    cipher = Cipher(algorithms.AES(key), modes.ECB(), backend=default_backend())\n\n    # Create encryptor\n    encryptor = cipher.encryptor()\n\n    # Read input file\n    with open(input_file, 'rb') as f:\n        plaintext = f.read()\n\n    # Add padding to plaintext\n    padder = padding.PKCS7(128).padder()\n    padded_plaintext = padder.update(plaintext) + padder.finalize()\n\n    # Encrypt plaintext\n    ciphertext = encryptor.update(padded_plaintext) + encryptor.finalize()\n\n    # Write output file with IV as the first 16 bytes\n    with open(output_file, 'wb') as f:\n        f.write(iv + ciphertext)\n\ndef decrypt_file(key, input_file, output_file):\n    # Read input file\n    with open(input_file, 'rb') as f:\n        iv = f.read(16)\n        ciphertext = f.read()\n\n    # Create AES cipher with ECB mode\n    cipher = Cipher(algorithms.AES(key), modes.ECB(), backend=default_backend())\n\n    # Create decryptor\n    decryptor = cipher.decryptor()\n\n    # Decrypt and remove padding\n    padded_plaintext = decryptor.update(ciphertext) + decryptor.finalize()\n    unpadder = padding.PKCS7(128).unpadder()\n    plaintext = unpadder.update(padded_plaintext) + unpadder.finalize()\n\n    # Write output file\n    with open(output_file, 'wb') as f:\n        f.write(plaintext)\n\n# Usage example\nkey = b'0123456789abcdef'  # 128-bit encryption key\ninput_file = 'plaintext.txt'\nencrypted_file = 'encrypted.bin'\ndecrypted_file = 'decrypted.txt'\n\nencrypt_file(key, input_file, encrypted_file)\ndecrypt_file(key, encrypted_file, decrypted_file)\n```\n\nMethod 2:\nPackages used: pycrypto\n\n```python\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad, unpad\nimport os\n\ndef encrypt_file(key, input_file, output_file):\n    # Generate random IV\n    iv = os.urandom(16)\n\n    # Create AES cipher with ECB mode\n    cipher = AES.new(key, AES.MODE_ECB)\n\n    # Read input file\n    with open(input_file, 'rb') as f:\n        plaintext = f.read()\n\n    # Add padding to plaintext\n    padded_plaintext = pad(plaintext, 16)\n\n    # Encrypt plaintext\n    ciphertext = cipher.encrypt(padded_plaintext)\n\n    # Write output file with IV as the first 16 bytes\n    with open(output_file, 'wb') as f:\n        f.write(iv + ciphertext)\n\ndef decrypt_file(key, input_file, output_file):\n    # Read input file\n    with open(input_file, 'rb') as f:\n        iv = f.read(16)\n        ciphertext = f.read()\n\n    # Create AES cipher with ECB mode\n    cipher = AES.new(key, AES.MODE_ECB)\n\n    # Decrypt and remove padding\n    padded_plaintext = cipher.decrypt(ciphertext)\n    plaintext = unpad(padded_plaintext, 16)\n\n    # Write output file\n    with open(output_file, 'wb') as f:\n        f.write(plaintext)\n\n# Usage example\nkey = b'0123456789abcdef'  # 128-bit encryption key\ninput_file = 'plaintext.txt'\nencrypted_file = 'encrypted.bin'\ndecrypted_file = 'decrypted.txt'\n\nencrypt_file(key, input_file, encrypted_file)\ndecrypt_file(key, encrypted_file, decrypted_file)\n```\n\nMethod 3:\nPackages used: cryptography.fernet, base64\n\n```python\nfrom cryptography.fernet import Fernet\nimport base64\n\ndef encrypt_file(key, input_file, output_file):\n    # Create Fernet object\n    fernet = Fernet(base64.urlsafe_b64encode(key))\n\n    # Read input file\n    with open(input_file, 'rb') as f:\n        plaintext = f.read()\n\n    # Encrypt plaintext\n    ciphertext = fernet.encrypt(plaintext)\n\n    # Write output file\n    with open(output_file, 'wb') as f:\n        f.write(ciphertext)\n\ndef decrypt_file(key, input_file, output_file):\n    # Create Fernet object\n    fernet = Fernet(base64.urlsafe_b64encode(key))\n\n    # Read input file\n    with open(input_file, 'rb') as f:\n        ciphertext = f.read()\n\n    # Decrypt ciphertext\n    plaintext = fernet.decrypt(ciphertext)\n\n    # Write output file\n    with open(output_file, 'wb') as f:\n        f.write(plaintext)\n\n# Usage example\nkey = b'0123456789abcdef0123456789abcdef'  # 256-bit encryption key\ninput_file = 'plaintext.txt'\nencrypted_file = 'encrypted.bin'\ndecrypted_file = 'decrypted.txt'\n\nencrypt_file(key, input_file, encrypted_file)\ndecrypt_file(key, encrypted_file, decrypted_file)\n```\n\nNote: In the examples above, replace the `key`, `input_file`, `encrypted_file`, and `decrypted_file` variables with the appropriate values for your use case. Also, ensure that the input file exists and the output directory is writable."
      },
      "finish_reason":"stop"
    }
  ],
  "usage":{
    "prompt_tokens":930,
    "completion_tokens":1218,
    "total_tokens":2148
  },
  "system_fingerprint":null
}